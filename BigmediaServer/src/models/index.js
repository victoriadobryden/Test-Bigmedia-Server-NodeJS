const Sequelize = require('sequelize')
const sequelize = require('./sequelize')

const appCtx = require('continuation-local-storage').getNamespace('app')

const {
  auth: {
    Provider,
    Action,
    AccessType
  },
  camp: {
    PosterType,
    CampaignType,
    PhotoType
  }
} = require('bigmedia-constants')

// simplified definition of fields
function id (field, opts = {}) {
  return Object.assign({
    type: Sequelize.INTEGER,
    allowNull: false,
    autoIncrement: true,
    primaryKey: true,
    _autoGenerated: true,
    field
  }, opts)
}

const makeFieldFunction = (type) => (field, opts = {}) => Object.assign({ type, field }, opts)
const int = makeFieldFunction(Sequelize.INTEGER)
const smallint = makeFieldFunction(Sequelize.INTEGER)
const tinyint = makeFieldFunction(Sequelize.INTEGER)
const text = makeFieldFunction(Sequelize.TEXT)
const dateonly = makeFieldFunction(Sequelize.DATE)
const blob = makeFieldFunction(Sequelize.BLOB)
const datetime = makeFieldFunction(Sequelize.DATE)
const varchar = makeFieldFunction(Sequelize.TEXT)
const bool = makeFieldFunction(Sequelize.BOOLEAN)
const money = makeFieldFunction(Sequelize.DECIMAL)
const decimal = makeFieldFunction(Sequelize.DECIMAL)
const float = makeFieldFunction(Sequelize.FLOAT)
const real = makeFieldFunction(Sequelize.REAL)
const numeric = makeFieldFunction(Sequelize.DECIMAL)
const uuid = makeFieldFunction(Sequelize.UUID)
const json = makeFieldFunction(Sequelize.JSON)

const getCurrentUserOrgId = _ => appCtx.get('user').orgId
const getCurrentUserId = _ => appCtx.get('user').id

const agencies = {
  publicis: {
    orgs:[3, 1205, 3776, 18045 ], // Starcom, MediaVest, Zenith / Publicis Groupe , Spark Foundry
    users:[
      // {id:54,groupAdv:['publicis-other','publicis-eurocar']}, //Андрей Клименко (Starcom)
      // {id:867,groupAdv:['publicis-other']}, //Эрнесто Фернандес (Starcom)
      // {id:869,groupAdv:['publicis-other']}, //Slava Maliku (Starcom)
      // {id:916,groupAdv:['publicis-other']}, //Константин Новицкий (Starcom)
      // {id:7609,groupAdv:['publicis-other']}, // Olga Smolyar (Spark Foundry)
      {id:13177,groupAdv:['publicis-other','publicis-bh','publicis-bolt','publicis-samsung','publicis-winner','publicis-sandoz','publicis-biosphere']}, // Natalia Kyselova (Zenith)
      {id:13178,groupAdv:['publicis-other']}, // Konstiantyn Novytskiy (Zenith)
      // {id:14394,groupAdv:['publicis-other']}, // Victoria Shapoval (Zenith)
      // {id:14714,groupAdv:['publicis-other']},// Andrey Rybkin (Zenith)
      // {id:14716,groupAdv:['publicis-other']},// Victoria Nikityuk (Zenith)
      

      {id:16019,groupAdv:['publicis-other','publicis-bh','publicis-bolt','publicis-samsung','publicis-winner','publicis-sandoz','publicis-biosphere']}, // Natalia Kyselova (MediaVest)

      {id:16027,groupAdv:['publicis-other','publicis-gsk','publicis-rba','publicis-stellantis','publicis-essity']}, //Alina Bashynska (Starcom)
      {id:16028,groupAdv:['publicis-other','publicis-gsk','publicis-rba','publicis-stellantis','publicis-essity']}, // Ihor Polutskyi (Starcom)
      {id:16029,groupAdv:['publicis-other','publicis-gsk','publicis-rba','publicis-stellantis','publicis-essity']}, // Konstiantyn Novytskiy (Starcom)
      
      {id:16030,groupAdv:['publicis-other','publicis-nestle','publicis-molokia','publicis-karcher','publicis-loreal','publicis-inbev']}, // Oleksandr Krasnikov (Starcom)
      {id:16031,groupAdv:['publicis-other','publicis-nestle','publicis-molokia','publicis-karcher','publicis-loreal','publicis-inbev']}, // Kateryna Dehtyarova (Starcom)
      {id:16032,groupAdv:['publicis-other','publicis-nestle','publicis-molokia','publicis-karcher','publicis-loreal','publicis-inbev']}, // Iryna Romakh (Starcom)
      
      {id:16033,groupAdv:['publicis-other','publicis-bh','publicis-bolt','publicis-samsung','publicis-winner','publicis-sandoz','publicis-biosphere']}, // Natalia Kyselova (Starcom)
      {id:16034,groupAdv:['publicis-other','publicis-bh','publicis-bolt','publicis-samsung','publicis-winner','publicis-sandoz','publicis-biosphere']}, // Oleksii Oleksii Hrytsai (Starcom)
      {id:16035,groupAdv:['publicis-other','publicis-bh','publicis-bolt','publicis-samsung','publicis-winner','publicis-sandoz','publicis-biosphere']}, // Natalia Sur (Starcom)
      {id:16137,groupAdv:['publicis-other','publicis-bh','publicis-bolt','publicis-samsung','publicis-winner','publicis-sandoz','publicis-biosphere']}, //Yehor Bazarov (Starcom)
          
      {id:16036,groupAdv:['publicis-other','publicis-eurocar','publicis-metro','publicis-visa','publicis-reckitt','publicis-kabanosy']}, // Kateryna Lutaieva(Starcom)
      {id:16037,groupAdv:['publicis-other','publicis-eurocar','publicis-metro','publicis-visa','publicis-reckitt','publicis-kabanosy']}, // Kateryna Melnyk (Starcom)
      {id:16038,groupAdv:['publicis-other','publicis-eurocar','publicis-metro','publicis-visa','publicis-reckitt','publicis-kabanosy']}, // Taras Soloduk (Starcom)
    ],
    default_groupAdv:['publicis-other']
  }
}

/* eslint-disable key-spacing */

const getOrgScopeWhere = _ => ({
  $or: {
      id: getCurrentUserOrgId(),
      ownerId: getCurrentUserId()
  }
})

const getOrgScopeAttributes = _ => ([
  'id',
  'name',
  'showPlanner',
  'clientType',
  'showHeatmap'
])

const Org = sequelize.define('org', {
  id             : id('id_org'),
  name           : text(),
  address        : text(),
  type           : int('id_orgtype'),
  industryId     : int('id_industry'),
  ownerId        : int('id_owner'),
  servNeed       : int('serv_need'),
  devopers       : int('devopers'),
  navId          : varchar('nav_id'),
  ukrNavId       : varchar('ukraine_nav_id'),
  shName         : varchar('sh_name'),
  shAddress      : varchar('sh_address'),
  shContact      : varchar('sh_contact'),
  clientType     : int('id_client_type'),
  daysForPayment : int('days_for_payment'),
  isNewClient    : bool('is_new_client'),
  showPlanner    : int('show_planner'),
  showHeatmap    : bool('show_heatmap')
}, {
  tableName: 'orgs',
  scopes : {
    rls () {
      return {
        rls: true,
        attributes: getOrgScopeAttributes(),
        where: getOrgScopeWhere()
      }
    }
  }
})

const City = sequelize.define('city', {
  id: id('id_city'),
  name: text(),
  nameEn: text('name_en'),
  disabled: bool()
}, {
  tableName: 'cities'
})

const User = sequelize.define('user', {
  id             : id('id_person'),
  cityId         : int('id_city'),
  orgId          : int('id_org', {allowNull: true}),
  login          : text('regname', {unique : true, allowNull: true}),
  name           : text('fullname'),
  password       : text('password'),
  webDisabled    : bool('webdisabled'),
  disabled       : bool('disabled'),
  address        : text('address'),
  regDate        : dateonly('reg_date'),
  firstName      : text('firstname'),
  lastName       : text('lastname')
}, {
  tableName:'persons',
  getterMethods: {
  }
})

User.belongsTo(City)
User.belongsTo(Org)

Org.belongsToMany(User, {as: 'managers', foreignKey:'id_org', otherKey: 'id_manager', through: 'v_org_managers'})

const AuthToken = sequelize.define('token', {
  id             : id('id'),
  profileId      : text(),
  token          : text(),
  displayName    : text(),
  pictureUrl     : text(),
  email          : text(),
  expirationDate : datetime(),
  checkedDate    : datetime(),
  providerId     : int('id_authprovider', {enum: Provider}),
  userId         : int('id_person')
}, {
  tableName:'web_authtoken',
  timestamps: true
})

AuthToken.belongsTo(User); User.hasMany(AuthToken)

const UserEmail = sequelize.define('userEmail', {
  userId: int('id_person'),
  emailId: int('id_email')
}, {
  tableName: 'peremails'
})

const Email = sequelize.define('email', {
  id    : id('id_email'),
  email : text()
}, {
  tableName: 'emails',
  scopes: {
    own () {
      return {
        rls: true,
        include: {
          model: UserEmail,
          attributes: [],
          required: true,
          where: {
            userId: getCurrentUserId()
          }
        }
      }
    }
  }
})

User.belongsToMany(Email, {through: UserEmail})
Email.hasOne(UserEmail)
UserEmail.belongsTo(User)

const Permission = sequelize.define('permission', {
  id         : id('id_permission'),
  action     : int('id_perfunction', {enum: Action}),
  userId     : int('id_person'),
  accessType : int('accesstype', {enum: AccessType})
}, {
  tableName: 'permissions'
})

Permission.belongsTo(User); User.hasMany(Permission)

// CAMPAIGNS
const getCurrentUserFilterOrgId = _ => {
  for(var agency in  agencies){
    if(agencies[agency].orgs.includes(getCurrentUserOrgId()))
      return agencies[agency].orgs
  }
  return getCurrentUserOrgId()
}
const getCurrentUsergroupAdv = _ =>{
  let groupAdv = null
  for(var agency in  agencies){
    if(agencies[agency].orgs.includes(getCurrentUserOrgId()))
      return agencies[agency].users.find(u=> u.id === getCurrentUserId()) ? agencies[agency].users.find(u=> u.id === getCurrentUserId()).groupAdv : agencies[agency].default_groupAdv
  }
  return groupAdv;
}

const getCampaignScopeWhere = _ => ({
  $or: {
    // clientId: getCurrentUserOrgId(),
    $and:{
      clientId: getCurrentUserFilterOrgId(),
      groupAdv: getCurrentUsergroupAdv()
    },
    // $and:{
    managerId: getCurrentUserId(),
    // groupAdv: getCurrentUsergroupAdv()
    // },
    // managerId: getCurrentUserId()
  },
  deleted: null
})

const getCampaignScopeInclude = _ => ([{
  model: User,
  as: 'manager',
  // attributes: ['lastname'],
  attributes: [],
  where: {
    orgId: {$ne :6263}
  },
  required: true
}])

const getCampaignScopeAttrs = _ => ([
  'id',
  'name',
  'startDate',
  'endDate',
  'managerId',
  'clientId',
  'filters',
  'params',
  'createdAt',
  'modifiedAt'
])

const Campaign = sequelize.define('campaign', {
  id                : id('id_campaign'),
  name              : text(),
  startDate         : dateonly('date_beg'),
  endDate           : dateonly('date_end'),
  managerId         : int('id_manager', {defaultValue: sequelize.fn('dbo.getDefaultCampaignManagerId')}),
  clientId          : int('id_client', {defaultValue: getCurrentUserOrgId}),
  // ownerId        : int('id_owner', {defaultValue: getCurrentUserId}),
  type              : int('id_advcamptype', {enum: CampaignType}),
  shared            : int(),
  deleted           : bool(),
  blankPosterPeriod : tinyint('blankposterperiod'),
  prEmail           : varchar('pr_email'),
  defaultContractId : int('id_contract_default'),
  social            : bool('social'),
  companyId         : int('id_company'),
  advertiserId      : int('id_advertiser'),
  politics          : bool('politics'),
  daysForPayment    : int('days_for_payment'),
  createdAt         : dateonly('create_date'),
  modifiedAt        : dateonly('modify_date'),
  filters           : varchar('web_filters'),
  params            : varchar('web_params'),
  groupAdv          : varchar('group_adv')
}, {
  // tableName: 'adv_camps',
  tableName: 'v_web_campaigns',
  hasTrigger: true,
  scopes : {
    rls () {
      return {
        rls: true,
        attributes: getCampaignScopeAttrs(),
        where: getCampaignScopeWhere(),
        include: getCampaignScopeInclude()
      }
    }
  }
})

Campaign.belongsTo(Org, {as: 'client'})
Campaign.belongsTo(User, {as: 'manager'})

const Advertiser = sequelize.define('advertiser', {
  id       : id('id'),
  code     : varchar('code'),
  name     : varchar('str_value')
}, {
    tableName: 'fin_reference'
})

Campaign.belongsTo(Advertiser)

const Subject = sequelize.define('subject', {
  id       : id('id_subject'),
  subject  : blob('subject'),
  posterId : int('id_poster')
}, {
  tableName: 'subjects'
})

const getCampaignScopeForBelonged = _ => ({
  rls: true,
  include: [{
    model: Campaign,
    attributes: [],
    where: getCampaignScopeWhere(),
    include: getCampaignScopeInclude(),
    required: true
  }]
})

const getUserScopeForBelonged = _ => ({
  rls: true,
  include: [{
    model: User,
    attributes: [],
    where: [{
        userId: getCurrentUserId()
    }],
    required: true
  }]
})

const Poster = sequelize.define('poster', {
  id            : id('id_poster'),
  type          : int('id_postertype', {enum: PosterType}),
  campaignId    : int('id_camp'),
  name          : varchar('name'),
  // foreignLabels : int('foreign_labels'),
  // social        : bool('social'),
  documentName  : varchar('name_doc'),
  createdAt     : datetime('date_entry'),
  updatedAt     : datetime('modify_date'),
  ownerId       : int('id_owner')
  // sizeTypeId    : int('id_sizetype')
}, {
  tableName: 'posters',
  hasTrigger: true,
  scopes: {
    rls: getCampaignScopeForBelonged,
    updateable: function () {
      return {
        rls: true,
        where: {
          ownerId: getCurrentUserId()
        }
      }
    }
  }
})

Poster.belongsTo(Campaign); Campaign.hasMany(Poster)
Poster.hasOne(Subject)
Poster.belongsTo(User, {as: 'owner'})

const Proposal = sequelize.define('proposal', {
  id               : id('id_proposal'),
  campaignId       : int('id_campaign'),
  sideId           : int('id_side'),
  faceId           : int('id_face'), // virtual column
  operationId      : int('id_operation'),
  startDate        : datetime('date_beg'),
  endDate          : datetime('date_end'),
  confirmationDate : datetime('confirm_date'),
  confirmed        : bool('confirmed'),
  createdAt        : datetime('create_date'),
  updatedAt        : datetime('modify_date')
}, {
  tableName: 'v_web_proposals',
  hasTrigger: true,
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})

Proposal.belongsTo(Campaign); Campaign.hasMany(Proposal)

const ProposalTable = sequelize.define('proposalTable', {
  id               : id('id_proposal'),
  campaignId       : int('id_campaign'),
  sideId           : int('id_side'),
  operationId      : int('id_operation'),
  startDate        : datetime('date_beg'),
  endDate          : datetime('date_end'),
  confirmationDate : datetime('confirm_date'),
  confirmed        : bool('confirmed'),
  createdAt        : datetime('create_date'),
  updatedAt        : datetime('modify_date')
}, {
  tableName: 'proposals',
  hasTrigger: true,
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})

ProposalTable.belongsTo(Campaign)

const PosterTask = sequelize.define('postertask', {
  id: id('id_postertask'),
  posterId: int('id_poster'),
  proposalId: int('id_proposal'),
  coverDate: datetime('datecover')
}, {
  tableName: 'postertasks',
  hasTrigger: true,
  scopes: {
    rls: {
      // TODO
    }
  }
})
PosterTask.belongsTo(Poster)
PosterTask.belongsTo(Proposal)

const FinDocument = sequelize.define('document', {
  id             : id('id'),
  typeId         : int('id_doctype'),
  pagesCount     : int('pages_count'),
  status         : int('id_status'),
  personId       : int('id_person'),
  createdAt      : datetime('date_created'),
  updatedAt      : datetime('date_modified'),
  templateUsedId : int('id_template_used'),
  vendorId       : int('id_vendor'),
  barcode        : varchar('barcode')
}, {
  tableName: 'fin_document',
  scopes: {
    rls () {
      return {
        rls: true,
        include: [{
          model: ViewLinkDocumentCampaign,
          attributes: [],
          include: [{
            model: Campaign,
            attributes: [],
            where: getCampaignScopeWhere(),
            include: getCampaignScopeInclude(),
            required: true
          }]
        }]
      }
    }
  }
})

const ViewLinkDocumentCampaign = sequelize.define('documentCampaign', {
  campaignId: int('id_campaign'),
  documentId: int('id_document')
}, {
  tableName: 'v_link_document_campaign',
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})
ViewLinkDocumentCampaign.belongsTo(Campaign); Campaign.hasMany(ViewLinkDocumentCampaign)
ViewLinkDocumentCampaign.belongsTo(FinDocument); FinDocument.hasMany(ViewLinkDocumentCampaign)
Campaign.belongsToMany(FinDocument, {through: ViewLinkDocumentCampaign})

const ViewDocumentCommon = sequelize.define('documentCommon', {
  id           : id('id_object'),
  contractId   : int('id_contract'),
  documentId   : int('id_document'),
  num          : varchar('document_num'),
  date         : datetime('document_date'),
  addendumType : int('id_addendum_type')
}, {
  tableName: 'v_union_documents'
})

ViewDocumentCommon.belongsTo(FinDocument)
FinDocument.hasOne(ViewDocumentCommon, {as: 'common'})

const FinDocumentFile = sequelize.define('documentFile', {
  id        : id('id'),
  documentId: int('id_document'),
  filetype  : int('id_filetype'),
  blob      : blob('blob'),
  filename  : varchar('filename'),
  createdAt : datetime('date_created'),
  updatedAt : datetime('date_modified'),
  personId  : int('id_person')
}, {
  tableName: 'fin_document_file'
})
FinDocumentFile.belongsTo(FinDocument)

FinDocument.hasOne(FinDocumentFile, {as: 'pdf', scope: {id_filetype: 345}})

const makeUncToURL = (uncPrefix, urlPrefix) => unc => {
  const components = unc.slice(uncPrefix.length + 1).split('\\')
  return urlPrefix + '/' + components.map(c => encodeURIComponent(c)).join('/')
}

const config = require('../config')
const photoConf = config.get('PHOTO')

const photoURLfromPath = makeUncToURL(photoConf.unc, photoConf.http)

const PhotoRec = sequelize.define('photoRec', {
  id            : id('id_photorec'),
  sideId        : int('id_side'),
  type          : int('id_phototype', {enum: PhotoType}),
  present       : bool('present'),
  takenAt       : datetime('date_photo'),
  url           : varchar('path'),
  highRes       : bool('highres'),
  printedAt     : datetime('date_printed'),
  hardPhoto     : bool('hard_photo'),
  withoutConstr : bool('withoutconstr'),
  photoId       : int('id_photo'),
  previewPath   : varchar('path_prev'),
  // archiveStatus : tinyint('archive_status'),
  social        : bool('social'),
  // servOperId    : int('id_servoper'),
  personId      : int('id_person')
}, {
  tableName: 'photos_rec',
  getterMethods: {
    url: function () {
      return photoURLfromPath(this.getDataValue('url'))
    }
  }
})

const PhotoNeed = sequelize.define('photoNeed', {
  id         : id('id_photoneed'),
  sideId     : int('id_side'),
  type       : int('id_phototype'),
  deadline   : datetime('deadline'),
  campaignId : int('id_campaign'),
  note       : varchar('note'),
  createdAt  : datetime('date_created'),
  updatedAt  : datetime('date_modified'),
  personId   : int('id_person'),
  autoLoad   : bool('auto_load'),
  fine       : money('fine')
}, {
  tableName: 'photos_need',
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})
PhotoNeed.belongsTo(Campaign); Campaign.hasMany(PhotoNeed)

const PhotoRel = sequelize.define('photoRel', {
  id: id('id_photorel'),
  photoNeedId: int('id_photoneed'),
  photoRecId: int('id_photorec'),
  createdAt: datetime('logtime'),
  personId: int('id_person')
}, {
  tableName: 'photos_rel'
})

PhotoNeed.belongsToMany(PhotoRec, {through: PhotoRel})
PhotoRec.belongsToMany(PhotoNeed, {through: PhotoRel})

const Construction = sequelize.define('construction', {
  id               : id('id_constr'),
  num              : int('constr_number'),
  cityId           : int('id_city'),
  type             : int('id_constrtype'),
  sizeTypeId       : int('id_sizetype'),
  ownerId          : int('id_owner'),
  orgId            : int('id_org'),
  address          : varchar('address'),
  addressTec       : varchar('addresstec'),
  light            : tinyint('light'),
  height           : float('height'),
  assembleDate     : datetime('assembl_date'),
  restricted       : tinyint('restricted'),
  contract         : varchar('contract'),
  lat              : float('lat'),
  lon              : float('lng'),
  note             : varchar('note'),
  sideHeight       : float('sideh'),
  sideWidth        : float('sidew'),
  navId            : varchar('nav_id'),
  updatedAt        : datetime('date_changed'),
  entityId         : int('id_entity'),
  //               : int('poster_id'),
  supplierCN       : varchar('supplier_cn'),
  onMap            : tinyint('onmap'),
  //               : int('id_old'),
  contractExpireAt : datetime('contract_expire'),
  orderNum         : varchar('order_number'),
  sidesCount       : numeric('sides_count'),
  //               : int('id_1c_org'),
  //               : varchar('id_1c_infano'),
  cnapNum          : varchar('cnap_num'),
  cnapDate         : datetime('cnap_date')
}, {
  tableName: 'constructions'
})

Construction.belongsTo(City); City.hasMany(Construction)

const Face = sequelize.define('face', {
  id             : id('id_face'),
  constructionId : int('id_constr'),
  num            : float('num'),
  type           : int('id_sidetype'),
  catId          : int('id_cat'),
  fromCenter     : smallint('fromcenter'),
  createdAt      : datetime('date_created'),
  updatedAt      : datetime('date_modified'),
  personId       : int('id_person'),
  firstSideId    : int('first_side'),
  streets        : varchar('streets'),
  price          : money('price')
}, {
  tableName: 'faces',
  getterMethods$$$: {
    networkId: function () {
      const st = this.firstSide.type
      const sz = this.construction.sizeType
      const cnt = this.construction.type
      const code = (sz.name in {'1.2x1.8': 1, '1.2x3.6': 1, '1.5x3': 1}) ? 'NETWORK_CITYLIGHT'
        : (st.name in {'Скролл': 1} && sz.name in {'2.3x3.14':1, '2.3x3.5': 1, '2.315x3.315': 1, '3x4': 1, '3x6': 1}) ? 'NETWORK_SCROLL'
        : (st.name in {'Лайтбокс': 1} && sz.name in {'2.3x3.14': 1, '2.3x3.5': 1, '2.315x3.315': 1, '3x4': 1, '3x6': 1}) ? 'NETWORK_BACKLIGHT'
        : (cnt.name in {'Мост/Арка': 1} && !(sz.name in {'3x6': 1}) && !(st.name in {'Призмавижн':1})) ? 'NETWORK_BRIDGE'
        : (st.name in {'Лайтбокс': 1}) ? 'NETWORK_BACKLIGHT'
        : (sz.name in {'Нестандартный': 1}) ? 'NETWORK_NONSTANDARD'
        : (st.name in {'Призмавижн': 1}) ? 'NETWORK_PRIZMA'
        : 'NETWORK_BOARD'
      return code
    }
  }
})

Face.belongsTo(Construction); Construction.hasMany(Face)

const Side = sequelize.define('side', {
  id              : id('id_side'),
  ownerId         : int('id_owner'),
  num             : int('side_number'),
  supplierSN      : varchar('supplier_sn'),
  constructionId  : int('id_constr'),
  typeId          : int('id_sidetype'),
  additAddress    : varchar('addit_address'),
  fromCenter      : bool('fromcenter'),
  categoryId      : int('id_cathegory'),
  assembleDate    : datetime('assembl_date'),
  rs              : varchar('rs'),
  umm             : varchar('umm'),
  rating          : tinyint('rating'),
  servCost        : decimal('serv_cost'),
  navId           : varchar('nav_id'),
  updatedAt       : datetime('date_changed'),
  elCost          : decimal('el_cost'),
  liningCost      : decimal('lining_cost'),
  entityId        : int('id_entity'),
  onMap           : bool('onmap'),
  url             : varchar('www_url'),
  prizmaTypeId    : int('id_prizmatype'),
  zone            : varchar('side_zone'),
  routeNum        : int('route_number'),
  price           : money('price'),
  mgrRating       : varchar('mgr_rating'),
  category        : varchar('newcat'),
  doorsNo         : varchar('doors_no'),
  grossCatId      : int('id_gross_cat'),
  demountedAt     : datetime('date_demounted'),
  additAddressUkr : varchar('addit_address_ukr'),
  additAddressEn  : varchar('addit_address_en'),
  faceId          : int('id_face'),
  show_data          : int('show_data')
}, {
  tableName: 'sides'
})

Side.belongsTo(Face); Face.hasMany(Side)
Face.belongsTo(Side, {as: 'firstSide'})

// too complicated. used sides.id_face that synchronized through sides_face table
// const SidesFace = sequelize.define('sidesFace', {
//   id:         id('id'),
//   faceId:     int('id_face'),
//   sideId:     int('id_side'),
//   weight:     int('weight'),
//   createdAt:  datetime('date_created'),
//   modifiedAt: datetime('date_modified'),
//   personId:   int('id_person')
// }, {
//   tableName: 'sides_face'
// })
//
// Side.belongsToMany(Face, {through: SidesFace})
// Face.belongsToMany(Side, {through: SidesFace})

Side.belongsTo(Construction); Construction.hasMany(Side)

PhotoNeed.belongsTo(Side); Side.hasMany(PhotoNeed)
PhotoRec.belongsTo(Side); Side.hasMany(PhotoRec)

const DoorsShowing = sequelize.define('doors', {
  id      : id('id_rec'),
  no      : varchar('doors_no'),
  grp     : real('grp'),
  ots     : real('ots'),
  mapX    : float('map_x'),
  mapY    : float('map_y'),
  city_id : int('id_city'),
  owner   : varchar('Owner')
}, {
  tableName: 'doors_showing'
})

Side.belongsTo(DoorsShowing, {as: 'doors', foreignKey: 'doorsNo', targetKey: 'no'})

const Street = sequelize.define('street', {
  id        : id('id'),
  cityId    : int('id_city'),
  nameUA    : varchar('name_ua'),
  nameRU    : varchar('name_ru'),
  nameEN    : varchar('name_en'),
  weight    : tinyint('weight'),
  personId  : int('id_person'),
  createdAt : datetime('date_created'),
  updatedAt : datetime('date_modified'),
  originId  : int('id_origin')
}, {
  tableName: 'map_street'
})

const StreetAlias = sequelize.define('streetAlias', {
  id        : id('id'),
  streetId  : int('id_street'),
  nameUA    : varchar('name_ua'),
  nameRU    : varchar('name_ru'),
  nameEN    : varchar('name_en'),
  showAlias : smallint('show_alias'),
  personId  : int('id_person'),
  createdAt : datetime('date_created'),
  updatedAt : datetime('date_modified')
}, {
  tableName :'map_street_alias'
})

Street.hasMany(StreetAlias, {as: 'aliases'})

const ConstructionStreet = sequelize.define('constructionStreet', {
  id             : id('id'),
  constructionId : int('id_constr'),
  streetId       : int('id_street'),
  additUA        : varchar('addit_ua'),
  additRU        : varchar('addit_ru'),
  additEN        : varchar('addit_en'),
  weight         : tinyint('weight'),
  visible        : bool('visible'),
  personId       : int('id_person'),
  createdAt      : datetime('date_created'),
  updatedAt      : datetime('date_modified')
}, {
  tableName: 'map_link_constr_street'
})

Construction.belongsToMany(Street, {through: ConstructionStreet})
Street.belongsToMany(Construction, {through: ConstructionStreet})
Construction.hasMany(ConstructionStreet)

const ServiceOperation = sequelize.define('serviceOperation', {
  id          : id('id_servoper'),
  type        : int('id_servopertype'),
  status      : int('id_servstatus'),
  performedAt : datetime('perform_date'),
  ownerId     : int('id_owner'),
  posterId    : int('id_poster'),
  sideId      : int('id_side'),
  coverAt     : datetime('datecover'),
  note        : varchar('note'),
  campaignId  : int('id_campaign'),
  photoRecId  : int('id_photorec')
}, {
  tableName: 'serv_opers',
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})

ServiceOperation.belongsTo(Campaign); Campaign.hasMany(ServiceOperation)
ServiceOperation.belongsTo(PhotoRec)
ServiceOperation.belongsTo(Poster)
ServiceOperation.belongsTo(Side)

const PublishedCampaign = sequelize.define('publishedCampaign', {
  id                : uuid('id', { primaryKey: true, _autoGenerated: true, allowNull:false, autoIncrement: true }),
  campaignId        : int('id_campaign'),
  name              : varchar(),
  startDate         : dateonly('date_beg'),
  endDate           : dateonly('date_end'),
  note              : varchar(), // 2000
  ownerId           : int('id_owner'),
  createdAt         : datetime('create_date'),
  updatedAt         : datetime('modify_date'),
  deleted           : bool(),
  closed            : bool(),
  email             : varchar('email'),
  status            : varchar('status'),
  cryptoHash        : varchar('crypto_hash'),
  showBigmediaCodes : bool('show_bigmedia_codes'),
  showSupplierCodes : bool('show_supplier_codes'),
  showDoorsCodes    : bool('show_doors_codes'),
  showSuppliers     : bool('show_suppliers'),
  showMetrics       : bool('show_metrics'),
  showCptMetrics    : bool('show_metrics_cpt'),
  showCoverage      : bool('show_coverage'),
  showPrices        : bool('show_prices'),
  showHeatmap       : bool('show_heatmap'),
  heatmapName       : varchar('heatmap_name'),
  heatmapParams     : varchar('heatmap_params'),
  heatmapParamsXml  : varchar('heatmap_params_xml')
}, {
  tableName: 'published_adv_camps',
  hasTrigger: true,
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})

PublishedCampaign.belongsTo(Campaign); Campaign.hasMany(PublishedCampaign)
PublishedCampaign.belongsTo(User, {as: 'owner'})

const PublishedProposal = sequelize.define('publishedProposal', {
  id                  : id(),
  publishedCampaignId : uuid('id_web_campaign'),
  proposalId          : int('id_proposal'),
  customRating        : int('custom_rating'),
  decision            : varchar(),
  note                : varchar(),
  processed           : bool(),
  createdAt           : datetime('create_date'),
  updatedAt           : datetime('modify_date'),
  processedAt         : datetime('processed_date'),
  price               : money(),
  ownerNote           : varchar('owner_note'),
  dix                 : int('dix'),
  startDate           : datetime('date_beg'),
  endDate             : datetime('date_end')
}, {
  tableName: 'published_proposals',
  hasTrigger: true,
  scopes: {
    rls: {}
  }
})

const ViewPublishedProposal = sequelize.define('viewPublishedProposal', {
  publishedProposalId : int('id'),
  id                  : id('proposalId'),
  publishedCampaignId : varchar(),
  faceNo              : float(),
  faceId              : int(),
  networkId           : int(),
  cityId              : int(),
  sizeId              : int(),
  catabId             : int(),
  grp                 : varchar(),
  ots                 : real(),
  lon                 : varchar(),
  lat                 : varchar(),
  pos                 : int(),
  angle               : int(),
  customRating        : int(),
  rating              : int(),
  startDate           : datetime(),
  endDate             : datetime(),
  posterId            : int(),
  operationId         : int(),
  sideId              : int(),
  sideNo              : int(),
  doorsNo             : varchar(),
  decision            : varchar(), // W(aiting), A(ccepted), D(eclined)
  createdAt           : datetime(),
  updatedAt           : datetime(),
  processed           : tinyint(),
  processedAt         : datetime(),
  note                : varchar(),
  ownerNote           : varchar(),
  price               : money(),
  address_ukr         : varchar(),
  address_ru          : varchar(),
  address_en          : varchar(),
  photos              : json()
}, {
  tableName: 'v_published_proposals',
  scopes: {
    rls: {}
  }
})

PublishedCampaign.hasMany(PublishedProposal)
PublishedCampaign.hasMany(ViewPublishedProposal)

ViewPublishedProposal.hasOne(Side)
const ViewPublishedThirdParty = sequelize.define('viewPublishedThirdParty', {
  publishedCampaignId : varchar(),
  id                  : id(),
  city                : varchar(),
  type                : varchar(),
  supplier            : varchar(),
  size                : varchar(),
  catab               : varchar(),
  grp                 : varchar(),
  ots                 : float(),
  lon                 : varchar(),
  lat                 : varchar(),
  angle               : int(),
  customRating        : int(),
  startDate           : datetime(),
  endDate             : datetime(),
  doorsNo             : int(),
  decision            : varchar(),
  createdAt           : datetime(),
  updatedAt           : datetime(),
  processed           : tinyint(),
  processedAt         : datetime(),
  address             : varchar(),
  note                : varchar(),
  price               : money(),
  ownerNote           : varchar()
}, {
  tableName: 'v_published_thirdparty',
  scopes: {
    rls: {}
  }
})
PublishedCampaign.hasMany(ViewPublishedThirdParty)

const ViewPublishedPresenter = sequelize.define('viewPublishedPresenter', {
  publishedCampaignId : uuid(),
  id                  : id(),
  city                : varchar(),
  cityId              : int(),
  type                : varchar(),
  supplier            : varchar(),
  size                : varchar(),
  catab               : varchar(),
  grp                 : varchar(),
  ots                 : float(),
  lon                 : varchar(),
  lat                 : varchar(),
  angle               : int(),
  customRating        : int(),
  startDate           : datetime(),
  endDate             : datetime(),
  doorsNo             : int(),
  decision            : varchar(),
  createdAt           : datetime(),
  updatedAt           : datetime(),
  processed           : tinyint(),
  processedAt         : datetime(),
  address_doors       : varchar(),
  address_ukr         : varchar(),
  address_ru          : varchar(),
  address_en          : varchar(),
  photos              : varchar(),
  note                : varchar(),
  price               : money(),
  ownerNote           : varchar(),
  pos                 : int(),
  posterId            : int(),
  hide_doors_data     : int()
}, {
  tableName: 'v_published_presenter',
  scopes: {
    rls: {}
  }
})
PublishedCampaign.hasMany(ViewPublishedPresenter)

const ViewProposalMix = sequelize.define('viewProposalMix', {
  publishedCampaignId : varchar('pub_id_campaign'),
  id                  : id('id'),
  city                : varchar('supplier_city'),
  cityId              : int('id_city'),
  type                : varchar('supplier_sidetype'),
  supplier            : varchar('supplier'),
  size                : varchar('supplier_size'),
  catab               : varchar('catab'),
  grp                 : varchar(),
  ots                 : real(),
  lon                 : varchar(),
  lat                 : varchar(),
  pos                 : int(),
  angle               : int(),
  customRating        : int('pub_custom_rating'),
  startDate           : datetime('date_beg'),
  endDate             : datetime('date_end'),
  doorsNo             : varchar('doors_no'),
  decision            : varchar('pub_decision'), // W(aiting), A(ccepted), D(eclined)
  createdAt           : datetime('pub_create_date'),
  updatedAt           : datetime('pub_modify_date'),
  processed           : tinyint('pub_processed'),
  processedAt         : datetime('pub_processed_date'),
  note                : varchar('pub_note'),
  ownerNote           : varchar('pub_owner_note'),
  price               : money('pub_price'),
  price_encrypted     : varchar('pub_price_encrypted'),
  address_ukr         : varchar(),
  address_ru          : varchar(),
  address_en          : varchar(),
  photos              : json(),
  hide_doors_data     : int()
  // ,
  // posterId            : int()
}, {
  tableName: 'v_web_proposals_mix',
  scopes: {
    rls: {}
  }
})

PublishedCampaign.hasMany(ViewProposalMix)

const PublishedMessage = sequelize.define('publishedMessage', {
  id                  : id(),
  publishedCampaignId : uuid('id_web_campaign'),
  body : varchar()
}, {
  tableName: 'published_messages'
})

const PresenterInvitation = sequelize.define('presenterInvitation', {
  id                  : id(),
  publishedCampaignId : uuid('id_web_campaign'),
  email               : varchar(),
  logTime             : datetime('logtime'),
  userId              : int()
}, {
  tableName: 'presenter_invitations'
})

PresenterInvitation.belongsTo(PublishedCampaign)

const PhotoPresentation = sequelize.define('photoPresentation', {
  id          : id(),
  sideId      : int('id_side'),
  photoRecId  : int('id_photorec'),
  rect        : blob('rect'),
  selPoints   : varchar('sel_points'),
  photo       : blob(),
  note        : varchar(),
  path        : varchar(),
  previewPath : varchar('path_preview'),
  createdAt   : datetime('date_created'),
  updatedAt   : datetime('date_modified'),
  personId    : int('id_person'),
  weight      : tinyint(),
  topicId     : int('id_topic')
}, {
  tableName: 'fin_photo_present'
})

PhotoPresentation.belongsTo(Side); Side.hasMany(PhotoPresentation)

const getOrgScopeForBelonged = _ => ({
  rls: true,
  include: [{
    model: Org,
    attributes: [],
    where: getOrgScopeWhere(),
    required: true
  }]
})

const OrgLogo = sequelize.define('orgLogo', {
  id: id('id_logo'),
  orgId: int('id_org'),
  logo: blob()
}, {
  tableName: 'org_logos',
  scopes: {
    rls: getOrgScopeForBelonged
  }
})

OrgLogo.belongsTo(Org); Org.hasOne(OrgLogo)

const ProposalMix = sequelize.define('proposalmix', {
  id               : id('id'),
  campaignId       : int('id_campaign'),
  sideId           : int('id_side'),
  operationId      : int('id_operation'),
  startDate        : datetime('date_beg'),
  endDate          : datetime('date_end'),
  confirmDate      : datetime('confirm_date'),
  confirmed        : int('confirmed'),
  propCreatedAt    : datetime('prop_create_date'),
  propUpdatedAt    : datetime('prop_modify_date'),
  faceId           : int('id_face'),
  supplierPrice    : money('supplier_price'),
  supplierPriceEnc : varchar('supplier_price_encrypted'),
  supplierNo       : varchar('supplier_no'),
  sideNo           : int('side_number'),
  faceNo           : float('face_no'),
  doorsNo          : int('doors_no'),
  byPlanner        : int('by_planner'),
  proposalId       : int('id_proposal'),
  webProposalId    : int('id_web_proposal'),
  pubCampaignId    : uuid('pub_id_campaign'),
  cityId           : int('id_city'),
  supplierCity     : varchar('supplier_city'),
  supplierSidetype : varchar('supplier_sidetype'),
  sidetypeId       : int('id_sidetype'),
  supplier         : varchar('supplier'),
  supplierSize     : varchar('supplier_size'),
  sizeId           : int('id_sizetype'),
  catab            : varchar('catab'),
  light            : varchar('light'),
  grp              : real('grp'),
  ots              : real('ots'),
  lon              : float('lon'),
  lat              : float('lat'),
  pos              : varchar('pos'),
  angle            : int('angle'),
  pubCustomRating  : int('pub_custom_rating'),
  pubDecision      : varchar('pub_decision'),
  pubCreatedAt     : datetime('pub_create_date'),
  pubUpdatedAt     : datetime('pub_modify_date'),
  pubProcessed     : int('pub_processed'),
  pubProcessedAt   : datetime('pub_processed_date'),
  address_ukr      : varchar('address_ukr'),
  address_ru       : varchar('address_ru'),
  address_en       : varchar('address_en'),
  photos           : varchar('photos'),
  pubNote          : varchar('pub_note'),
  pubPrice         : money('pub_price'),
  pubPriceEnc      : varchar('pub_price_encrypted'),
  pubOwnerNote     : varchar('pub_owner_note'),
  photo_url        : varchar('photo_url'),
  schema_url       : varchar('schema_url'),
  hide_doors_data     : int()
}, {
  tableName: 'v_web_proposals_mix',
  hasTrigger: true,
  scopes: {
    rls: getCampaignScopeForBelonged
  }
})

ProposalMix.belongsTo(Campaign); Campaign.hasMany(ProposalMix)

const POI = sequelize.define('poi', {
  id               : id('id'),
  categoryId       : int('id_category'),
  name_en          : varchar('name_en'),
  name_ru          : varchar('name_ru'),
  name_ukr         : varchar('name_uk'),
  city             : varchar('city'),
  cityId           : int('id_city'),
  address          : varchar('address'),
  housenumber     : varchar('housenumber'),
  lat              : float('lat'),
  lon              : float('lon')
}, {
    tableName: 'v_map_poi',
    scopes: {
        // TODO:
        // rls: {}
    }
})

const Icon = sequelize.define('icon', {
  id        : id('id'),
  ownerId   : int('id_owner'),
  iconBlob  : blob('icon_blob'),
  createdAt : datetime('date_entry'),
  width     : int('width'),
  height    : int('height'),
  deleted   : int('deleted')
}, {
  tableName: 'web_map_icon',
  hasTrigger: true,
  scopes: {
    rls: function () {
      return {
        rls: true,
        where: {
          ownerId: getCurrentUserId()
        }
      }
    },
    updateable: function () {
      return {
        rls: true,
        where: {
          ownerId: getCurrentUserId()
        }
      }
    }
  }
})

Icon.belongsTo(User, {as: 'owner'})

const UserPOI = sequelize.define('userpoi', {
  id               : id('id'),
  userId           : int('id_person'),
  campaignId       : int('id_campaign'),
  categoryId       : int('id_category'),
  customCategory   : varchar('custom_category'),
  name             : varchar('name'),
  city             : varchar('city'),
  cityId           : int('id_city'),
  address          : varchar('address'),
  housenumber      : varchar('housenumber'),
  lat              : float('lat'),
  lon              : float('lon'),
  color            : varchar('color'),
  iconPath         : varchar('icon_path'),
  iconId           : int('id_icon'),
  geometry         : varchar('geometry')
}, {
    tableName: 'map_poi_user',
    scopes: {
      rls: getCampaignScopeForBelonged
    }
})
UserPOI.belongsTo(Campaign); Campaign.hasMany(UserPOI)

const GeoQuery = sequelize.define('geoquery', {
  id               : id('id'),
  userId           : int('id_person'),
  address          : varchar('address'),
  name             : varchar('name'),
  lat              : float('lat'),
  lon              : float('lon'),
  logTime          : datetime('logtime'),
  keyUsed          : varchar('key_used'),
  result           : varchar('result'),
  fromCache        : int('from_cache'),
  language         : varchar('language')
}, {
    tableName: 'web_geocoding_query',
    hasTrigger: true
})

const Taglog = sequelize.define('taglog', {
  id             : id('id'),
  userId         : int('id_person'),
  tag            : varchar('tag'),
  ip             : varchar('ip'),
  logTime        : datetime('logtime'),
  params         : varchar('params'),
  site           : varchar('site')
}, {
  tableName: 'web_taglog'
})

const Monitoring = sequelize.define('v_photo_monitoring', {
  id		    : id('id'),
  date	    : varchar('date'),
  startDate : datetime('startDate'),
  endDate   : datetime('endDate')
}, {
  tableName: 'v_photo_monitoring'
})

const getMonitoringDataScopeAttrs = _ => ([
  'date',
  'fConstr',
  'supplierNo',
  'city',
  'address',
  'constrtype',
  'sizetype',
  'owner',
  'advertisingCategory',
  'brand',
  'advevents',
  'translate',
  'damage',
  'note',
  'lon',
  'lat',
  'catab',
  'brandId'
])
const MonitoringData = sequelize.define('v_photo_monitoring_dada', {
  id			    : id('id'),
  MonitoringId : int('id_monitoring'),
  date			  : varchar('date'),
  fConstr		  : int('F-constr'),
  supplierNo  : varchar('[supplier_sn]'),
  city			  : varchar('[city]'),
  address		  : varchar('[address]'),
  constrtype 	: varchar('[constrtype]'),
  sizetype		: varchar('[sizetype]'),
  owner			  : varchar('[owner]'),
  advertisingCategory: varchar('[Advertising category]'),
  brand    		: varchar('[Brand]'),
  advevents		: varchar('[Advevents]'),
  translate   : varchar('[Translate]'),
  damage      : varchar('[Damage]'),
  note    		: varchar('[Note]'),
  lon    		  : float('[Lon]'),
  lat    		  : float('[Lat]'),
  catab    		: varchar('[A_B]'),
  brandId    	: int('[id_brand]')
}, {
  tableName: 'v_photo_monitoring_dada',
  hasTrigger: true,
  scopes : {
    rls () {
      return {
        rls: true,
        attributes: getMonitoringDataScopeAttrs()
      }
    }
  }
})

const enums = {
  Provider,
  Action,
  AccessType,
  PosterType,
  CampaignType,
  PhotoType
}

const models = {
  City,
  Org,
  User,
  AuthToken,
  UserEmail,
  Email,
  Permission,
  Campaign,
  Subject,
  Poster,
  Proposal,
  ProposalTable,
  PosterTask,
  FinDocument,
  FinDocumentFile,
  PhotoNeed,
  PhotoRec,
  PhotoRel,
  Side,
  Face,
  Construction,
  ViewLinkDocumentCampaign,
  ViewDocumentCommon,
  DoorsShowing,
  Street,
  StreetAlias,
  ConstructionStreet,
  ServiceOperation,
  PublishedCampaign,
  PublishedProposal,
  ViewPublishedProposal,
  ViewPublishedThirdParty,
  ViewPublishedPresenter,
  PublishedMessage,
  PresenterInvitation,
  PhotoPresentation,
  OrgLogo,
  Advertiser,
  ProposalMix,
  POI,
  UserPOI,
  Icon,
  GeoQuery,
  Taglog,
  MonitoringData,
  Monitoring
}

module.exports = Object.assign({Sequelize, sequelize, enums}, models, enums)
