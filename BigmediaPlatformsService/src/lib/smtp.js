const nodemailer = require('nodemailer')
const config = require('../config')
const { getFromDB } = require('./database')
const partners = require('../config/partners')

async function sendNotifications () {
    const data = await getFromDB('exec sp_web_platform_partners_occ_stat')
    const now = new Date()
    const deadline = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    const allPartners = data.recordset
    const debtors = allPartners.filter((partner)=>{
        return partner['last_update'] < deadline && Object.values(partners).some((configPartner)=>configPartner.name===partner.name && configPartner.email)
    })
    // console.log(htmlTable);
    const message = {
        subject: '–ê–∫—Ç—É–∞–ª—å–Ω–∞ —Å—ñ—Ç–∫–∞',
        // to: 'ustiloff@bigboard.ua',
        text: '–ü—Ä–∏—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–∂—É —Å—ñ—Ç–∫—É'
    }
    debtors.forEach(async (debtor)=>{
        const lastString = debtor.last_update ? debtor.last_update.toLocaleString('UA') : ''
        Object.values(partners).forEach((p)=>{
            if (debtor.name === p.name) {
                message.to = p.email.addresses.join(';')
            }
        })
        // message.to = debtor.email.addresses.join(';')
        if (!message.to) {
            message.to = 'ustiloff@bigboard.ua'
        }
        message.html = `<p>–î–æ–±—Ä–æ–≥–æ –¥–Ω—è</p><p>–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑, –∫–æ–ª–∏ –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥ –í–∞—Å —Å—ñ—Ç–∫—É, –±—É–≤ ${lastString}</p><p>–í—ñ–¥–ø—Ä–∞–≤—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∞–∫—Ç—É–∞–ª—å–Ω—É —Å—ñ—Ç–∫—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ–π –ª–∏—Å—Ç.</p><p>–î—è–∫—É—é. –©–∏—Ä–æ –í–∞—à, BMA —Ä–æ–±–æ—Ç ü§ñ</p><p><br>PS. –ù–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—è –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü—é –∞–¥—Ä–µ—Å—É. –Ø —Ä–æ–∑—É–º—ñ—é —Ç—ñ–ª—å–∫–∏ –ª–∏—Å—Ç–∏ –∑ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏–º–∏ —Å—ñ—Ç–∫–∞–º–∏ :-)<br>–ù–∞—Ç–æ–º—ñ—Å—Ç—å, —è–∫—â–æ —É –í–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é <a href="mailto:ilya.kiselov@bigmedia.ua">ilya.kiselov@bigmedia.ua</a></p><p>PPS. –Ø –Ω–µ –±—É–¥—É –Ω–∞–±—Ä–∏–¥–∞—Ç–∏ –í–∞–º –ª–∏—Å—Ç–∞–º–∏, —è–∫—â–æ –±—É–¥—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥ –í–∞—Å —Å—ñ—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è –¥–æ 11:00</p>`;
        await sendEmail(message)
    })
}

async function sendStatus () {
    const data = await getFromDB('exec sp_web_platform_partners_occ_stat')
    const allPartners = data.recordset
    const htmlTable = allPartners.reduce((html, partner)=>{
        let partnerEmails = '', sendToPartner = ''
        Object.values(partners).forEach((configPartner) => {
            if (configPartner.name === partner.name && configPartner.email) {
                partnerEmails = configPartner.email.addresses.join(';')
            }
        })
        if (partnerEmails) {
            sendToPartner = '<a href="mailto:' + partnerEmails + '">–ù–∞–≥–Ω—É—Ç–∏ –º–∞—Ç—é–∫—ñ–≤</a>'
        }
        partner.last_update = partner.last_update ? partner.last_update.toLocaleString('UA') : ''
        return html + '<tr><td>' + Object.values(partner).join('</td><td>') + '</td><td>' + sendToPartner + '</td></tr>'
    }, '<table border="1"><tr><td>' + Object.keys(allPartners[0]).join('</td><td>') + '</td><td></td></tr>') + '</table>'
    const message = {
        subject: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –≤ —Å–∏—Å—Ç–µ–º—ñ',
        // to: 'ustiloff@bigboard.ua',
        to: config.adminEmails.join(';'),
        text: '–¢–∞–±–ª–∏—Ü—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö',
        html: '<p>–î–æ–±—Ä–æ–≥–æ –¥–Ω—è. –û—Å—å —â–æ –º–∞—î–º–æ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç:</p><p>' + htmlTable + '</p><p><br>Have a nice day</p><p>Sincerely yours, BMA Robot ü§ñ</p>'
    }
    await sendEmail(message)
}

async function sendEmail (opts) {
    let transporter = nodemailer.createTransport({
        host: config.mail.host,
        port: 2525,
        ignoreTLS: true,
        auth: {
            user: config.mail.user,
            pass: config.mail.password
        }
    })

    const msgOpts = Object.assign(opts, {from: '"BMA robot ü§ñ" <' + config.mail.user + '>'})

    let info = await transporter.sendMail(
        msgOpts
        // {
        // from: '"Fred Foo üëª" <foo@example.com>', // sender address
        // to: 'bar@example.com, baz@example.com', // list of receivers
        // subject: 'Hello ‚úî', // Subject line
        // text: 'Hello world?', // plain text body
        // html: '<b>Hello world?</b>' // html body
        // }
    );

    console.log('Message sent: %s', info.messageId);
}

module.exports = { sendEmail, sendNotifications, sendStatus}
