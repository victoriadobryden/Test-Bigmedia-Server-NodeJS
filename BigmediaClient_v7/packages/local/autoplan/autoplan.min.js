var algorithms=["MinPrice","MaxGRPDivPrice","MaxCoverage"],workers=[],busyWorkers=[],freeWorkers=[],nextId=0,queryableFunctions={processAutoPlan:function(e,r,t){processAutoPlan(e,r,t)},stopAll:function(){stopAll()}};function getNextId(){return nextId++}function getCityWorker(){var e=freeWorkers.pop();return e||((e=new QueryableWorker("plancity.min.js")).addListener("algorithmCompleted",algorithmCompleted),workers.push(e)),e}function defaultReply(e){}function reply(){if(arguments.length<1)throw new TypeError("reply - not enough arguments");postMessage({queryMethodListener:arguments[0],queryMethodArguments:Array.prototype.slice.call(arguments,1)})}function stopAll(){for(;0<busyWorkers.length;){var e=busyWorkers.pop();e.terminate(),e===this.pWorker&&(this.pWorker=null)}reply("terminated")}function processAutoPlan(e,r,t){this.params=t,this.cities=r,this.pWorker||(this.pWorker=new QueryableWorker("prepare.min.js"),this.pWorker.wid=getNextId(),this.pWorker.addListener("cityCompleted",cityPrepared),busyWorkers.push(pWorker),workers.push(pWorker)),this.pWorker.sendQuery("prepareFaces",e,r,t)}function QueryableWorker(e,r,t){var o=this,s=new window.Worker(e),n={};this.wid=getNextId(),(s.wrapper=this).defaultListener=r||function(){},t&&(s.onerror=t),this.postMessage=function(e){s.postMessage(e)},this.terminate=function(){s.terminate()},this.addListener=function(e,r){n[e]=r},this.removeListener=function(e){delete n[e]},this.sendQuery=function(){if(arguments.length<1)throw new TypeError("QueryableWorker.sendQuery takes at least one argument");s.postMessage({queryMethod:arguments[0],queryMethodArguments:Array.prototype.slice.call(arguments,1)})},s.onmessage=function(e){e.data instanceof Object&&e.data.hasOwnProperty("queryMethodListener")&&e.data.hasOwnProperty("queryMethodArguments")?n[e.data.queryMethodListener].apply(o,e.data.queryMethodArguments.concat(this.wrapper)):this.defaultListener.call(o,e.data)}}onmessage=function(e){e.data instanceof Object&&e.data.hasOwnProperty("queryMethod")&&e.data.hasOwnProperty("queryMethodArguments")?queryableFunctions[e.data.queryMethod].apply(self,e.data.queryMethodArguments):defaultReply(e.data)},cityPrepared=function(t,o,s,e){reply("cityPrepared",t,o,s),busyWorkers=busyWorkers.filter(function(e){return e!==this.pWorker}),algorithms.forEach(function(e){var r=getCityWorker();busyWorkers.push(r),r.sendQuery("getFacesByAlgorithm",this.cities[t],e,o,this.params,s)})},algorithmCompleted=function(e,r,t,o){reply("algorithmCompleted",e,r,t),busyWorkers=busyWorkers.filter(function(e){return e!==o}),freeWorkers.push(o)};